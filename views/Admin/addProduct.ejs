<%- include('partials/header') %>  

<div class="container pt-4">

    <div class="mb-3">Product Managment</div>

    <div class="container border w-100 px-4 py-4 ">
        <h4 class="border-bottom pb-2">Product Information</h4>
        <form action="<%= product?`/admin/editProduct/${product.id}`:'/admin/addProduct' %>" id="add-product" method="POST" enctype="multipart/form-data">
            <div class="row form-group mb-2">
    
                <div class="col">
                <label for="productName">Product Name</label>
                <input type="text" class="form-control" value="<%=product?product.productName:'' %>" placeholder="product name" name="productName" >
                <p id="productName-notValid" class="text-danger d-none fs-14"></p>
                </div>
    
                </div>
            
            <div class="row form-group mb-2">

                <!-- category -->

                <div class="col">
                    <label for="category">Category</label>
                    <select class="form-select" id="category" name="category">    
                        <option value="" selected>category</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>" <%= product && product.category.toString() === category._id.toString() ? 'selected' : '' %>><%= category.categoryName %></option>
                        <% }) %>
                    </select>
                    <p id="category-notValid" class="text-danger d-none fs-14"></p>
                  </div>

                  <!-- brands -->

                <div class="col">
                    <label for="brand">Brand</label>
                    <select class="form-select" id="brand" name="brand"> 
                        <option value="" selected>brand</option>  
                        <% brands.forEach(brand => { %>
                            <option value="<%= brand._id %>" <%= product && product.brand.toString() === brand._id.toString() ? 'selected' : ''  %>><%= brand.brandName %></option>
                        <% }) %> 
                    </select>
                    <p id="brand-notValid" class="text-danger d-none fs-14"></p>
                  </div>
                
            </div>

            
                <div id="variants-container">
                    <% if (product && product.variants.length > 0) { %>
                        <% product.variants.forEach((variant, index) => { %>
                    <div class="variant-group" >
                    <div class="row form-group mb-2 ">
                        <h5>Variant <span class="variant-index"></span></h5>
                        <div class="col">
                            <!-- Color selection with price update -->
                            <select class="form-select" id="" name="variants[<%= index%>][color]">    
                                <option value="" >color</option>
                                <option value="white" <%= variant.color === 'white' ? 'selected' : '' %>>white</option>
                                <option value="black" <%= variant.color === 'black' ? 'selected' : '' %>>black</option>
                                <option value="blue" <%= variant.color === 'blue' ? 'selected' : '' %>>blue</option>
                                <option value="green" <%= variant.color === 'green' ? 'selected' : '' %>>green</option>
                            </select>
                            <p id="variants[<%= index%>].color-notValid" class="text-danger d-none fs-14"></p>
                        </div>
                        <div class="col">
                            <!-- Price display based on color selection -->
                            <input type="number" placeholder="price" value="<%= variant.price %>" class="form-control price-input" name="variants[<%= index %>][price]">
                            <p id="variants[0].price-notValid" class="text-danger d-none fs-14"></p>
                        </div>
                        <div class="col">
                            <!-- Size and stock management section -->
                            <% variant.sizes.forEach(function(sizeStock, sizeIndex) { %>
                                <div class="row size-stock-group mb-2">
                                    <div class="col">
                                        <input type="number" class="form-control" name="sizes[<%= sizeIndex %>][size]" value="<%= sizeStock.size %>" placeholder="Size">
                                        <p id="variants[<%= index%>].sizes[<%= sizeIndex %>].size-notValid" class="text-danger d-none fs-14"></p>
                                    </div>
                                    <div class="col">
                                        <input type="number" class="form-control" name="sizes[<%= sizeIndex %>][stock]" value="<%= sizeStock.stock %>" placeholder="Stock">
                                        <p id="variants[<%= index%>].sizes[<%= sizeIndex %>].stock-notValid" class="text-danger d-none fs-14"></p>
                                    </div>
                                    <div class="col">
                                        <button type="button" class="btn btn-danger" onclick="removeSizeStock(this)">Remove</button> 
                                    </div>
                                </div>
                            <% }); %>
                            <div id="size-stock-container">
                                <!-- Container for dynamically adding size and stock inputs -->
                                <button type="button" class="bg-dark text-white border-0 add-size-stock-btn"  onclick="addSizeStock(this,'<%=index %>')">Add Size & Stock</button>
                                <p id="sizes-notValid" class="text-danger d-none fs-14"></p>
                            </div>
                        </div>
                    </div>
    
                    <!-- image section -->
                <div class="row form-group mb-2 image-upload-container">
                    <div class="col">
                        <label for="image1">Image 1</label>
                        <div class="image-preview">
                            <img id="preview-variant0-image1" <% if (variant.images[0]) { %>
                                src = "\<%= variant.images[0] %>"
                            <% } %> alt="Image 1" class="img-thumbnail w-100 h-100" /> 
                        </div>
                    <input type="file" id="variant0-image1" value="<%= imagePath[`variant${index}-image0`] %>" class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image1','<%=`variant[${index}.product]`  %>')">
                    
                    <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image1')">Crop</button>
                    </div>
    
    
                    <div class="col">
                        <label for="image2">Image 2</label>
                        <div class="image-preview">
                            <img id="preview-variant0-image2"  <% if (variant.images[1]) { %>
                                src = "\<%= variant.images[1] %>"
                            <% } %> alt="Image 2" class="img-thumbnail w-100 h-100" />
                        </div>
                    <input type="file" id="variant0-image2" value="<%= imagePath[`variant${index}-image1`] %>" class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image2')">
                    <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image2')">Crop</button>
                    </div>
    
    
                    <div class="col">
                        <label for="image3">Image 3</label>
                        <div class="image-preview">
                            <img id="preview-variant0-image3"  <% if (variant.images[2]) { %>
                                src = "\<%= variant.images[2] %>"
                            <% } %> alt="Image 3" class="img-thumbnail w-100 h-100" />
                        </div>
                    <input type="file" id="variant0-image3" class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image3')">
                    <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image3')">Crop</button>
                    </div>
    
    
                <div class="col">
                    <label for="image4">Image 4</label>
                    <div class="image-preview">
                        <img id="preview-variant0-image4"  <% if (variant.images[3]) { %>
                            src = "\<%= variant.images[3] %>"
                        <% } %> alt="Image 4" class="img-thumbnail w-100 h-100" />
                    </div>
                <input type="file" id="variant0-image4" value="<%= imagePath[`variant${index}-image3`] %>" class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image4')">
                <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image4')">Crop</button>
                </div>
                <p id="image-notValid" class="text-danger d-none fs-14"></p>
                </div>
    
                        <div class="col text-center">
                            <button type="button" class="primary-btn" onclick="removeVariant(this)">Remove</button>
                        </div>
                    </div>
                    <% }) %>
                    <% } else { %>
                        <div class="variant-group">
                            <div class="row form-group mb-2 ">
                                <h5>Variant <span class="variant-index"></span></h5>
                                <div class="col">
                                    <!-- Color selection with price update -->
                                    <select class="form-select" name="variants[0][color]">    
                                        <option value="" >color</option>
                                        <option value="white">white</option>
                                        <option value="black">black</option>
                                        <option value="blue">blue</option>
                                        <option value="green">green</option>
                                    </select>
                                    <p id="variants[0].color-notValid" class="text-danger d-none fs-14"></p>
                                </div>
                                <div class="col">
                                    <!-- Price display based on color selection -->
                                    <input type="number" placeholder="price" class="form-control price-input" name="variants[0][price]">
                                    <p id="variants[0].price-notValid" class="text-danger d-none fs-14"></p>
                                </div>
                                <div class="col">
                                    <!-- Size and stock management section -->
                                    <div id="size-stock-container">
                                        <!-- Container for dynamically adding size and stock inputs -->
                                        <button type="button" class="bg-dark text-white border-0 add-size-stock-btn"  onclick="addSizeStock(this,0)">Add Size & Stock</button>
                                        <p id="sizes-notValid" class="text-danger d-none fs-14"></p>
                                    </div>
                                </div>
                            </div>
            
                            <!-- image section -->
                        <div class="row form-group mb-2 image-upload-container">
                            <div class="col">
                                <label for="image1">Image 1</label>
                                <div class="image-preview">
                                    <img id="preview-variant0-image1" alt="Image 1" class="img-thumbnail w-100 h-100" style="display: none;" />
                                </div>
                            <input type="file" id="variant0-image1"   class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image1')">
                            <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image1')">Crop</button>
                            </div>
            
            
                            <div class="col">
                                <label for="image2">Image 2</label>
                                <div class="image-preview">
                                    <img id="preview-variant0-image2" alt="Image 2" class="img-thumbnail w-100 h-100" style="display: none;" />
                                </div>
                            <input type="file" id="variant0-image2" class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image2')">
                            <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image2')">Crop</button>
                            </div>
            
            
                            <div class="col">
                                <label for="image3">Image 3</label>
                                <div class="image-preview">
                                    <img id="preview-variant0-image3" alt="Image 3" class="img-thumbnail w-100 h-100" style="display: none;" />
                                </div>
                            <input type="file" id="variant0-image3" class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image3')">
                            <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image3')">Crop</button>
                            </div>
            
            
                        <div class="col">
                            <label for="image4">Image 4</label>
                            <div class="image-preview">
                                <img id="preview-variant0-image4" alt="Image 4" class="img-thumbnail w-100 h-100" style="display: none;" />
                            </div>
                        <input type="file" id="variant0-image4" class="form-control image-input" name="images" accept="image/*" onchange="handleFileChange(event,'variant0-image4')">
                        <button type="button" class="btn btn-dark mt-2 fuCropper" data-bs-toggle="modal" data-bs-target="#cropModal" onclick="initCropper('variant0-image4')">Crop</button>
                        </div>
                        <p id="image-notValid" class="text-danger d-none fs-14"></p>
                        </div>
            
                                <div class="col text-center">
                                    <button type="button" class="primary-btn" onclick="removeVariant(this)">Remove</button>
                                </div>
                            </div>
                    <% } %>
                </div>
            
                <button type="button" class="primary-btn" onclick="addVariant()">Add Variant</button>
            
            
        <!-- <button type="button" class="primary-btn" onclick="addVariant()">Add Variant</button> -->

            <!-- product description -->
            <div class="row form-group mb-3"> 
                <div class="col ">
                <label for="description">Description</label>
                <textarea type="text" class="w-100" placeholder="" name="description"  style="height:9.25rem;">
                    <%= product?product.productDescription: ''  %>
                </textarea>
                <p id="description-notValid" class="text-danger d-none fs-14"></p>
            </div>
            </div>
           

    <!-- cropper modal -->

    <div class="modal " id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="height: 400px;">
              <div class="cropper-container" style="height: 400px;">
                  <img id="cropper-image" class="img-fluid" src="" style=" display: block; margin: auto;">
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary" id="crop-button">Crop</button>
            </div>
          </div>
        </div>
      </div>

      <!-- submit the form -->
    <div class="form-group mt-2 text-center border-0">
        <button type="submit" class="primary-btn" id="sub-form"><%= product? 'Update Product':'Add product'  %></button>
        </div>
            
        </form> 
        
    </div>

</div>
</main> 

<script src="https://cdn.jsdelivr.net/npm/cropperjs"></script>

<script>
 
    let variantsCount = 1;
    let cropper;
    let currentImageId;

    // Function to add size and stock inputs
    function addSizeStock(button,variantIndex) {

        const index = variantIndex             //varaint index
        console.log('varaint index',index)

        const sizeStockContainer = button.parentElement;
        const sizeIndex = sizeStockContainer.querySelectorAll('.size-stock-group').length;
        // Creating size and stock inputs dynamically
        const sizeStockGroup = document.createElement('div');
        sizeStockGroup.className = 'row size-stock-group mb-2';
        sizeStockGroup.innerHTML = `
            <div class="col">
                <input type="number" class="form-control" name="sizes[${sizeIndex}][size]" placeholder="Size" >
                <p id="variants[${index}].sizes[${sizeIndex}].size-notValid" class="text-danger d-none fs-14"></p>
            </div>
            <div class="col">
                <input type="number" class="form-control" name="sizes[${sizeIndex}][stock]" placeholder="Stock" >
                <p id="variants[${index}].sizes[${sizeIndex}].stock-notValid" class="text-danger d-none fs-14"></p>
            </div>
            <div class="col">
                <button type="button" class="btn btn-danger" onclick="removeSizeStock(this)">Remove</button>
            </div>
        `;
        sizeStockContainer.insertBefore(sizeStockGroup, button);
    }

    function removeSizeStock(button){
       button.closest('.size-stock-group').remove()
    }
    
    //for adding new variant
    function addVariant() {
        const container = document.getElementById('variants-container');
        const variantGroup = document.querySelector('.variant-group').cloneNode(true);

        //change varaint count from select tag
        variantGroup.querySelectorAll('select').forEach(element => {
            let name = element.name.replace(/\d+/, variantsCount);
            element.name = name;
            element.value = '';
        });

        //change varaint count from input tag
        variantGroup.querySelectorAll('input').forEach(element => {
            let name = element.name.replace(/\d+/, variantsCount);
            element.name = name;
            element.value = '';
            if(element.type == 'file'){
                //replace id
                let newId = element.id.replace(/variant\d+/,`variant${variantsCount}`)
                element.id = newId

                //replace the attribute
                let newOnchange = element.getAttribute('onchange').replace(/variant\d+/,`variant${variantsCount}`)
                element.setAttribute('onchange',newOnchange)
                element.value = ''
            }
        });

        //cahnge varaint count when doing image cropping
        variantGroup.querySelectorAll('.fuCropper').forEach(element =>{
            let newOnclick = element.getAttribute('onclick').replace(/variant\d+/,`variant${variantsCount}`)
            element.setAttribute('onclick',newOnclick)
        })
        
        //change varaint count from image
        variantGroup.querySelectorAll('.img-thumbnail').forEach(element=>{
            let newId = element.id.replace(/variant\d+/,`variant${variantsCount}`)
            element.id = newId
            element.style.display = 'none'
            element.src = ''
        })

        //change varaint count for error message
        variantGroup.querySelectorAll('p').forEach(element =>{
            let newId = element.id.replace(/\d+/, variantsCount)
            element.id = newId
        })

        //change variant count from adding size and stock button
        variantGroup.querySelectorAll('.add-size-stock-btn').forEach(element =>{
            let changeOnClick = element.getAttribute('onclick').replace(/\d+/, variantsCount)
            element.setAttribute('onclick',changeOnClick)
        })


        variantsCount++;
        container.appendChild(variantGroup);
    }

    //for remove a variant
    function removeVariant(button) {
        button.closest('.variant-group').remove();
    }


    function handleFileChange(event, imageId,) {  
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const previewImage = document.getElementById(`preview-${imageId}`);
                previewImage.src = e.target.result;
                previewImage.style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    }

    function initCropper(imageId) {
        currentImageId = imageId;
        console.log('currnetimageid',currentImageId)
        const image = document.getElementById('cropper-image');
        image.src = document.getElementById(`preview-${currentImageId}`).src;
        

        if (cropper) {
            cropper.destroy();
        }
        cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1
        });
    }

    document.getElementById('crop-button').addEventListener('click', () => {
        const croppedCanvas = cropper.getCroppedCanvas();
        if (croppedCanvas) {
            croppedCanvas.toBlob((blob) => {
                const file = new File([blob], `cropped-${currentImageId}.jpg`, { type: 'image/jpeg' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);

                const fileInput = document.getElementById(currentImageId);
                fileInput.files = dataTransfer.files;

                document.getElementById(`preview-${currentImageId}`).src = croppedCanvas.toDataURL();

                const modal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
                modal.hide();
            });
        }
    });

    function handleFormSubmission(event, isUpdate , productId) {
        console.log(isUpdate)
        console.log(productId)
        event.preventDefault();
        try {
            const formData = new FormData(addProductForm);

            //collecting variants
            const variantGroup = document.querySelectorAll('.variant-group');
            const variants = Array.from(variantGroup).map((group, index) => {
                const color = formData.get(`variants[${index}][color]`)
                const price = parseFloat(formData.get(`variants[${index}][price]`))

                
                const sizes = Array.from(group.querySelectorAll('.size-stock-group')).map(ssGroup =>{
                    return {
                    size: parseInt(ssGroup.querySelector('input[name^="sizes"][name$="[size]"]').value),
                    stock: parseInt(ssGroup.querySelector('input[name^="sizes"][name$="[stock]"]').value)
                    }
                })
                console.log('sizes: ',sizes)
                

                //collecting images
                const images = Array.from(group.querySelectorAll('.image-input')).reduce((acc,input)=>{
                    if(input.files.length > 0){
                        acc.push(input.files[0])
                    }
                    return acc
                },[])

                return{color, price, sizes, images}
            });
            
            console.log('variants before stringigy',variants)

            const newFormData = new FormData();
            newFormData.append('productName', formData.get('productName'));
            newFormData.append('category', formData.get('category'));
            newFormData.append('brand', formData.get('brand'));
            newFormData.append('description', formData.get('description'));

            //appenting variants
            variants.forEach((variant, index)=>{
                //appenting color & price
                if (variant.id) {
                   newFormData.append(`variants[${index}][id]`, variant.id);
                }
                newFormData.append(`variants[${index}][color]`,variant.color)
                newFormData.append(`variants[${index}][price]`,variant.price)

                //appending size & stok
                variant.sizes.forEach((size, sizeIndex)=>{
                    console.log('sizes: ' ,size)
                    newFormData.append(`variants[${index}][sizes][${sizeIndex}][size]`,size.size)
                    newFormData.append(`variants[${index}][sizes][${sizeIndex}][stock]`,size.stock)
                })

                //appending images
                variant.images.forEach((image , imageIndex)=>{
                    if (image instanceof File) {
                    // This is a new file upload
                    newFormData.append(`variants[${index}][images][${imageIndex}]`, image, `variant${index}_image${imageIndex}`);
                } else if (image) {
                    // This is an existing image path
                    newFormData.append(`variants[${index}][images][${imageIndex}]`, image);
                }
                
                })
            })

            console.log('form data',newFormData)
            


          
            for (let [key, value] of newFormData.entries()) {
             console.log(key, value);
            }

            const endpoint = isUpdate ? `/admin/editProduct/${productId}` : '/admin/addProduct';
            const method = isUpdate ? 'POST' : 'POST'; // Both add and update use POST

            fetch(endpoint, {
                method,
                body: newFormData
            })
                .then(response => response.json())
                .then(result => {
                    console.log('result', result)
                    if(result.validationError){
                        console.log('validatoin error',result.validationErrors)
                        Object.entries(result.validationErrors).forEach(([field,message])=>{
                              const validationFaild = document.getElementById(`${field}-notValid`)
                              if(validationFaild){
                                validationFaild.classList.remove('d-none')
                                validationFaild.textContent = message
                              }
                        })
                    }
                    else if(result.success) {
                        Swal.fire({
                            icon: "success",
                            title: result.message,
                            showConfirmButton: false,
                            timer: 2000
                          });
                          window.location.href = '/admin/productManagment';  
                    } 
                    else {
                        Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: result.message,
                      });
                    }
                })
                .catch(error => console.error('Error:', error));
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // Initialization
    const addProductForm = document.getElementById('add-product');

    const productString = `<%- JSON.stringify(product || {}).replace(/\\/g, '\\\\') %>`;
    const product = JSON.parse(productString);
    console.log('Parsed product:', product);

    const productId = product._id || null;
    console.log('Product ID:', productId);

    addProductForm.addEventListener('submit', (event) => {
        event.preventDefault();
             
        const isUpdate = document.getElementById('sub-form').textContent == 'Update Product'?true:false
        console.log(isUpdate)
        handleFormSubmission(event, isUpdate, productId);
    });


    //==========validation==========//
    // function provalidation(){
    //     const productName = document.getElementById('')
    // }

   




</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



    <%- include('partials/footer') %>

